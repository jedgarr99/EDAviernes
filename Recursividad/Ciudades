## -*- coding: utf-8 sympy.sqrt((j-i)**2 +(p[i]-p[j])**2)%sympy.sqrt(2)==0:-*-
import numpy as np

def mejoresRutas():
    'Metodo Principal: Llama a los demas metodos y crea las variables que se usaran en los demas metodos'
    ' No recibe ni devuelve parametros, pues imprime los resultados'
    global a,precioMin
    
    n=leeArchivo()
    a = np.zeros( (1,n+1), dtype=np.int)
    p=[0]*(n+1)
    d=[1]*(n+1)
    h=[0]*(n+1)
    for x in range(0,n+1):
        h[x]=x
    precioMin=calculaPrecio(h)
    per(p,d,1,n)
    print("Precio Minimo: ",precioMin)
    print("Rutas")
    for x in range(1, a.shape[0]):
        print(a[x][1:])
    

def per( p, disp, k,n):
    'Genera todas las permutaciones de viajes posibles y guarda las que tengan el precio minimo'
    'Funciona recursivamente, si ya termino de generar la ruta, checa si su costo es menor, si es asi, establece su costo como el nuevo minimo'
    'Si el costo es igual, solo agrega la ruta a las rutas guardadas'
    if k>n :
        global a,precioMin
        if(calculaPrecio(p)<precioMin):
            a = np.zeros( (1,n+1), dtype=np.int)
            a=np.vstack((a,p))
            precioMin=calculaPrecio(p)
        else:
            if(calculaPrecio(p)==precioMin):
                a=np.vstack((a,p))       
    else:
        for w in range (1,n+1):
            if disp[w] ==1:
                disp[w] =0
                p[k]=w
                per(p,disp,k+1, n)
                disp[w]=1

def calculaPrecio(p):
    'Calcula el precio de la ruta proporcionada'
    precio=0
    for x in range(1,len(matriz[0])):
        precio+=matriz[p[x+1]-1][p[x]-1] 
    return precio

def leeArchivo():
    'Lee un archivo y regresa su primer entero, que es el tamaÃ±o de la matriz'
    global matriz
    f = open("datosCiudad2.txt", "r")
    n=int(f.readline())
    matriz= []
    for line in f: # read rest of lines
        matriz.append([int(x) for x in line.split()])
    f.close()
    return n
